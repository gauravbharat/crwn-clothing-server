{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'; // Return Action OBJECT\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n}); // Return Action OBJECT\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n}); // Return Action OBJECT\n\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); // Return Action FUNCTION, which would be intercepted by Redux Thunk, which works on the action items and\n// dispatches the action object to the reducer. Redux Thunk ignores the 'action objects' meant for reducer\n// All-n-all what I understood is that, whatever 'action' code we wrote in a component, can now be moved to\n// Redux Thunk i.e. action items written in Redux Actions object and is intercepted by Thunk to work on it.\n\n/** If redux-thunk middleware is enabled, any time you attempt to 'dispatch' a function instead of an object,\n * the middleware will call that function with 'dispatch' method itself as the first argument */\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n}; // GET DATA PATTERN 3 - Using native Fetch API for API calls provided by firestore\n\n/** 07192020 - Another approach is to use the native Fetch API to use the APIs provided\n * by firestore\n * However, we aren't using it in this case becaues the data returned is very much nested into multiple\n * levels. See the console for the log in the example below */\n// fetch('https://firestore.googleapis.com/v1/projects/garyd-crwn-db/databases/(default)/document/collections')\n// .then(response => response.json())\n// .then(collections => console.log(collections))\n//  GET DATA PATTERN 2 - Using Promise based methods provided by firestore\n\n/** 07192020 - Replace the live-stream of updates, provided by firestore using the\n * observable/observer pattern, used promise pattern to one-time get records on each\n * componentDidMount() call */\n// collectionRef.get().then(snapshot => {\n//   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//   updateCollections(collectionsMap);\n//   this.setState({ loading: false });\n// });\n// GET DATA PATTERN 1 - observable/observer, live-data stream, open-connection listening to update\n// events, provided by firestore\n// /** Whenever the collectionRef updates OR when the code is run for the first time,\n//  * this collectionRef would send us the SnapShot representing the code of our collection's snapshot array\n//  * at the time when this code renders */\n// collectionRef.onSnapshot(async snapshot => {\n//   const collectionsMap = await convertCollectionsSnapshotToMap(snapshot);\n//   await updateCollections(collectionsMap);\n//   this.setState({ loading: false });\n// });","map":{"version":3,"sources":["/Users/gauravmendse/Library/Mobile Documents/com~apple~CloudDocs/dev/react/ztm/crwn-clothing-server/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP,C,CAKA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADoB,CAAP,CAA9B,C,CAIP;;AACA,OAAO,MAAMC,uBAAuB,GAAIC,cAAD,KAAqB;AAC1DH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADoC;AAE1DC,EAAAA,OAAO,EAAEF;AAFiD,CAArB,CAAhC,C,CAKP;;AACA,OAAO,MAAMG,uBAAuB,GAAIC,YAAD,KAAmB;AACxDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBADkC;AAExDH,EAAAA,OAAO,EAAEE;AAF+C,CAAnB,CAAhC,C,CAKP;AACA;AACA;AACA;;AACA;;;AAEA,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC9C,SAAQC,QAAD,IAAc;AACnB,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR;AAEAY,IAAAA,aAAa,CACVE,GADH,GAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,YAAMZ,cAAc,GAAGL,+BAA+B,CAACiB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACD,KALH,EAMGa,KANH,CAMUC,KAAD,IAAWP,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAN5B;AAOD,GAXD;AAYD,CAbM,C,CAeP;;AACA;;;;AAIA;AACA;AACA;AAEA;;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import ShopActionTypes from './shop.types';\n\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap,\n} from '../../firebase/firebase.utils';\n\n// Return Action OBJECT\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START,\n});\n\n// Return Action OBJECT\nexport const fetchCollectionsSuccess = (collectionsMap) => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap,\n});\n\n// Return Action OBJECT\nexport const fetchCollectionsFailure = (errorMessage) => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage,\n});\n\n// Return Action FUNCTION, which would be intercepted by Redux Thunk, which works on the action items and\n// dispatches the action object to the reducer. Redux Thunk ignores the 'action objects' meant for reducer\n// All-n-all what I understood is that, whatever 'action' code we wrote in a component, can now be moved to\n// Redux Thunk i.e. action items written in Redux Actions object and is intercepted by Thunk to work on it.\n/** If redux-thunk middleware is enabled, any time you attempt to 'dispatch' a function instead of an object,\n * the middleware will call that function with 'dispatch' method itself as the first argument */\nexport const fetchCollectionsStartAsync = () => {\n  return (dispatch) => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n\n    collectionRef\n      .get()\n      .then((snapshot) => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n      })\n      .catch((error) => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};\n\n// GET DATA PATTERN 3 - Using native Fetch API for API calls provided by firestore\n/** 07192020 - Another approach is to use the native Fetch API to use the APIs provided\n * by firestore\n * However, we aren't using it in this case becaues the data returned is very much nested into multiple\n * levels. See the console for the log in the example below */\n// fetch('https://firestore.googleapis.com/v1/projects/garyd-crwn-db/databases/(default)/document/collections')\n// .then(response => response.json())\n// .then(collections => console.log(collections))\n\n//  GET DATA PATTERN 2 - Using Promise based methods provided by firestore\n/** 07192020 - Replace the live-stream of updates, provided by firestore using the\n * observable/observer pattern, used promise pattern to one-time get records on each\n * componentDidMount() call */\n// collectionRef.get().then(snapshot => {\n//   const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//   updateCollections(collectionsMap);\n//   this.setState({ loading: false });\n// });\n\n// GET DATA PATTERN 1 - observable/observer, live-data stream, open-connection listening to update\n// events, provided by firestore\n// /** Whenever the collectionRef updates OR when the code is run for the first time,\n//  * this collectionRef would send us the SnapShot representing the code of our collection's snapshot array\n//  * at the time when this code renders */\n// collectionRef.onSnapshot(async snapshot => {\n//   const collectionsMap = await convertCollectionsSnapshotToMap(snapshot);\n//   await updateCollections(collectionsMap);\n//   this.setState({ loading: false });\n// });\n"]},"metadata":{},"sourceType":"module"}