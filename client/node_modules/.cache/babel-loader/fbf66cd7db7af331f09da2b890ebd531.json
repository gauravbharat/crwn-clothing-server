{"ast":null,"code":"import { createSelector } from 'reselect';\nimport memoize from 'lodash.memoize';\n\nconst shopSelector = state => state.shop;\n\nexport const shopCollectionsSelector = createSelector([shopSelector], shop => shop.collections);\nexport const collectionsForPreviewSelector = createSelector([shopCollectionsSelector], collections => collections ? Object.keys(collections).map(key => collections[key]) : []);\n/** Memoize/Cache the return of this function for the dynamic argument 'collectionUrlParam'\n * If the function is called again with the same 'collectionUrlParam', the function won't be re-run\n * again and would return the last cached values */\n\nexport const collectionSelector = memoize(collectionUrlParam => createSelector([shopCollectionsSelector], collections => collections ? collections[collectionUrlParam] : null));\nexport const isCollectionFetchingSelector = createSelector([shopSelector], shop => shop.isFetching);\nexport const isCollectionsLoadedSelector = createSelector([shopSelector], shop => !!shop.collections);","map":{"version":3,"sources":["/Users/gauravmendse/Library/Mobile Documents/com~apple~CloudDocs/dev/react/ztm/crwn-clothing-server/client/src/redux/shop/shop.selectors.js"],"names":["createSelector","memoize","shopSelector","state","shop","shopCollectionsSelector","collections","collectionsForPreviewSelector","Object","keys","map","key","collectionSelector","collectionUrlParam","isCollectionFetchingSelector","isFetching","isCollectionsLoadedSelector"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAAtC;;AAEA,OAAO,MAAMC,uBAAuB,GAAGL,cAAc,CACnD,CAACE,YAAD,CADmD,EAElDE,IAAD,IAAUA,IAAI,CAACE,WAFoC,CAA9C;AAKP,OAAO,MAAMC,6BAA6B,GAAGP,cAAc,CACzD,CAACK,uBAAD,CADyD,EAExDC,WAAD,IACEA,WAAW,GAAGE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,GAAzB,CAA8BC,GAAD,IAASL,WAAW,CAACK,GAAD,CAAjD,CAAH,GAA6D,EAHjB,CAApD;AAMP;;;;AAGA,OAAO,MAAMC,kBAAkB,GAAGX,OAAO,CAAEY,kBAAD,IACxCb,cAAc,CAAC,CAACK,uBAAD,CAAD,EAA6BC,WAAD,IACxCA,WAAW,GAAGA,WAAW,CAACO,kBAAD,CAAd,GAAqC,IADpC,CADyB,CAAlC;AAMP,OAAO,MAAMC,4BAA4B,GAAGd,cAAc,CACxD,CAACE,YAAD,CADwD,EAEvDE,IAAD,IAAUA,IAAI,CAACW,UAFyC,CAAnD;AAKP,OAAO,MAAMC,2BAA2B,GAAGhB,cAAc,CACvD,CAACE,YAAD,CADuD,EAEtDE,IAAD,IAAU,CAAC,CAACA,IAAI,CAACE,WAFsC,CAAlD","sourcesContent":["import { createSelector } from 'reselect';\nimport memoize from 'lodash.memoize';\n\nconst shopSelector = (state) => state.shop;\n\nexport const shopCollectionsSelector = createSelector(\n  [shopSelector],\n  (shop) => shop.collections\n);\n\nexport const collectionsForPreviewSelector = createSelector(\n  [shopCollectionsSelector],\n  (collections) =>\n    collections ? Object.keys(collections).map((key) => collections[key]) : []\n);\n\n/** Memoize/Cache the return of this function for the dynamic argument 'collectionUrlParam'\n * If the function is called again with the same 'collectionUrlParam', the function won't be re-run\n * again and would return the last cached values */\nexport const collectionSelector = memoize((collectionUrlParam) =>\n  createSelector([shopCollectionsSelector], (collections) =>\n    collections ? collections[collectionUrlParam] : null\n  )\n);\n\nexport const isCollectionFetchingSelector = createSelector(\n  [shopSelector],\n  (shop) => shop.isFetching\n);\n\nexport const isCollectionsLoadedSelector = createSelector(\n  [shopSelector],\n  (shop) => !!shop.collections\n);\n"]},"metadata":{},"sourceType":"module"}